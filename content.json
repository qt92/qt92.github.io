{"meta":{"title":"前端迷(Front-end fan)","subtitle":null,"description":"前端开发爱好者frank的工作笔记","author":"frank","url":"http://ye63.github.io"},"pages":[{"title":"categories","date":"2018-08-27T11:47:23.000Z","updated":"2018-09-11T07:43:09.104Z","comments":true,"path":"categories/index.html","permalink":"http://ye63.github.io/categories/index.html","excerpt":"","text":""},{"title":"前端资讯分享","date":"2018-09-04T11:52:49.000Z","updated":"2018-09-11T07:43:09.107Z","comments":true,"path":"share/index.html","permalink":"http://ye63.github.io/share/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-08-27T11:26:57.000Z","updated":"2018-08-27T12:18:09.849Z","comments":false,"path":"tags/index.html","permalink":"http://ye63.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"VsCode读取项目文件的Eslint规则 保存时自动修复格式错误","slug":"VsCode读取项目文件的Eslint规则-保存时自动修复格式错误","date":"2018-09-19T02:13:43.000Z","updated":"2018-09-19T02:35:12.455Z","comments":true,"path":"2018/09/19/VsCode读取项目文件的Eslint规则-保存时自动修复格式错误/","link":"","permalink":"http://ye63.github.io/2018/09/19/VsCode读取项目文件的Eslint规则-保存时自动修复格式错误/","excerpt":"","text":"配置：安装VsCode的EsLint和vetur插件为项目安装EsLint包注意要安装在开发环境上，还有就是如果你使用的是脚手架的话，选了Eslint选项，会自带这些包。 在项目的根目录下添加.eslintrc.js用于校验代码格式，根据项目情况，可自行编写校验规则：123module.exports = &#123; // Eslint规则&#125; 首选项设置：将下面这部分放入首选项设置中： \"eslint.autoFixOnSave\": true, // 启用保存时自动修复,默认只支持.js文件 \"eslint.validate\": [ \"javascript\", // 用eslint的规则检测js文件 { \"language\": \"vue\", // 检测vue文件 \"autoFix\": true // 为vue文件开启保存自动修复的功能 }, { \"language\": \"html\", \"autoFix\": true }, ], 大功告成：点开文件，你可能会看到如下报错，无需一个一个去改，只要保存一下文件，就可以自动修复这些代码格式上的问题了。 注意：如果整个文件都飘红的话，不会一次性修改如果的格式问题，会一下改一部分，你可能需要多按几次保存。","categories":[],"tags":[{"name":"前端优化","slug":"前端优化","permalink":"http://ye63.github.io/tags/前端优化/"}]},{"title":"前端周刊-2018年09月第3周","slug":"前端周刊-2018年09月第3周","date":"2018-09-18T11:53:32.000Z","updated":"2018-09-20T01:20:24.003Z","comments":true,"path":"2018/09/18/前端周刊-2018年09月第3周/","link":"","permalink":"http://ye63.github.io/2018/09/18/前端周刊-2018年09月第3周/","excerpt":"","text":"编写「可读」代码的实践链接:http://taobaofed.org/blog/2017/01/05/writing-readable-code/ 摘要伟大的文学作品都是建立在废纸堆上的，不断删改作品的过程有助于写作者培养良好的「语感」。当然，代码毕竟不是艺术品，程序员没有精力也不一定有必要像作家一样反复打磨自己的代码/作品。但是，如果我们能够在编写代码时稍稍多考虑一下实现的合理性，或者在添加新功能的时候稍稍回顾一下之前的实现，我们就能够培养出一些「代码语感」。这种「代码语感」会非常有助于我们写出高质量的可读的代码。 React + Redux 组件化方案链接:http://imweb.io/topic/57c531bc6227a4f55a8872c2 摘要组件化方案:理想中的组件化，第一步应该就是组件的标签化， 例如有一个 Header 组件，无需关注组件内部的实现，我们只需要使用一个 标签就能调用它，通过设置属性的方式，来控制它的显示的内容，和对应的事件。借助 jsx 语法，React 已经实现上述想法。但是由于 React 的数据流向是单向的， 子组件的数据和方法只能由父级组件赋予，一旦组件嵌套层次变深，传递数据将会变得非常复杂。redux 框架解决了这个问题，简单来说，它将 react 由父级传递数据，变为了由一个统一的数据源 store 单向地向各个组件传递数据。所有数据都存放在 store 中，组件内部不维护任何数据。 store 提供了 dispatch 方法来触发改变 store 中数据。 dispatch 传入的值被称作 action。 dispatch(action) 之后，会进入到 store 中称为 reducer 的处理函数，这些 reducer 会依据不同的 action 的类型，进行不同的处理，reducer 返回的值就会作为 store 中新的数据，一个 reducer 对应的是 store 中一个数据字段，每多一个reducer， store 中就多一个数据字段。数据发生改变后， store 就会通知对应的组件重新渲染。 通过 redux 框架提供的 connect 高阶函数， 直接从 store 选取需要的数据和申明需要使用的方法传入组件中，这些申明的方法是组件事件具体的逻辑的实现，例如发送请求，上报逻辑等等，所以通常调用 dispatch(action) 的逻辑也会包含在里面。 ANT DESIGN PRO-开箱即用的中台前端/设计解决方案链接:https://github.com/ant-design/ant-design-pro?utm_source=gold_browser_extension 摘要💎 优雅美观：基于 Ant Design 体系精心设计；📐 常见设计模式：提炼自中后台应用的典型页面和场景；🚀 最新技术栈：使用 React/dva/antd 等前端前沿技术开发；📱 响应式：针对不同屏幕大小设计；🎨 主题：可配置的主题满足多样化的品牌诉求；🌐 国际化：内建业界通用的国际化方案；⚙️ 最佳实践：良好的工程实践助您持续产出高质量代码；🔢 Mock 数据：实用的本地数据调试方案；✅ UI 测试：自动化测试保障前端产品质量； 实现一个完美符合Promise/A+规范的Promise链接:https://github.com/forthealllight/blog/issues/4 摘要Promise允许我们通过链式调用的方式来解决“回调地狱”的问题，特别是在异步过程中，通过Promise可以保证代码的整洁性和可读性。本文主要解读Promise/A+规范，并在此规范的基础上，自己实现一个Promise. Vue知识点整理链接https://segmentfault.com/a/1190000016344599 对于MVVM的理解？ Model代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。View 代表UI 组件，它负责将数据模型转化成UI 展现出来。ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。 Vue的生命周期（8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后) Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。beforeCreate（创建前） 在数据观测和初始化事件还未开始created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。 Vue实现数据双向绑定的原理：Object.defineProperty（） Vue组件间的参数传递1.父组件与子组件传值父组件传给子组件：子组件通过props方法接受数据;子组件传给父组件：$emit方法传递参数2.非父子组件间的数据传递，兄弟组件传值eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适 vue路由的钩子函数 首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。 beforeEach主要有3个参数to，from，next： to：route即将进入的目标路由对象， from：route当前导航正要离开的路由 next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。 vuex是什么？怎么使用？哪种功能场景使用它只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。在main.js引入store，注入。新建了一个目录store，….. export 。场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车","categories":[{"name":"前端周刊","slug":"前端周刊","permalink":"http://ye63.github.io/categories/前端周刊/"}],"tags":[{"name":"优质文章分享","slug":"优质文章分享","permalink":"http://ye63.github.io/tags/优质文章分享/"}]},{"title":"reactjs中事件传参(关于event)","slug":"reactjs中事件传参-关于event","date":"2018-09-10T07:06:44.000Z","updated":"2018-09-11T07:43:09.080Z","comments":true,"path":"2018/09/10/reactjs中事件传参-关于event/","link":"","permalink":"http://ye63.github.io/2018/09/10/reactjs中事件传参-关于event/","excerpt":"","text":"问题描述我们在事件中通常需要获取控件的值，通常通过event.target.value的方式来取值，在绑定事件时，event参数也不需要传递，在方法中直接使用即可。但是，有些时候需要传入一些其他的参数，比如需要循环绑定一些输入框，在绑定onChange事件时，需要传入索引index和数据源的索引进行对应1234567891011121314151617181920212223242526onHandleChange(index,event)&#123; let val=event.target.value&#125;//关键代码source.map((item,index)=&gt;&#123; return &lt;input type=\"text\" value=&#123;item.name&#125; onChange=&#123;this.onHandleChange.bind(this,index)&#125; /&gt;&#125;);``` #### 代码解释有的同学应该已经看出区别了，onHandleChange在声明时有两个参数，但在调用时却只传递了一个参数，这就是今天要讲的:&gt; **在给方法传递新参数时，方法原有的参数会排在新参数之后**做过reactjs的同学都知道，event这个参数是不需要手动传递的，直接在方法中声明就可以使用，如下代码：```jsxonChangeHandle(event)&#123; let val=event.target.value;&#125;render()&#123; return (&lt;div&gt; &lt;input type=\"text\" onChange=&#123;this.onChangeHandle.bind(this)&#125; /&gt;&lt;/div&gt;)&#125; 摘自 作者：不将就人生链接：https://www.jianshu.com/p/1026d71d04d6來源：简书简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://ye63.github.io/tags/react/"}]},{"title":"前端周刊-2018年09月第2周","slug":"前端周刊-2018年09月第2周","date":"2018-09-10T03:48:21.000Z","updated":"2018-09-19T01:23:18.058Z","comments":true,"path":"2018/09/10/前端周刊-2018年09月第2周/","link":"","permalink":"http://ye63.github.io/2018/09/10/前端周刊-2018年09月第2周/","excerpt":"","text":"es6常用基础合集url:https://www.jianshu.com/p/cfb0893c34f1知识点:let,const箭头函数模板字符串解析结构函数默认参数展开运算符对象字面量与classPromise ES6新特性概览url： http://www.cnblogs.com/Wayou/p/es6_new_features.html知识点:箭头操作符类的支持增强的对象字面量字符串模板解构参数默认值，不定参数，拓展参数let与const 关键字for of 值遍历iterator, generator模块Map，Set 和 WeakMap，WeakSetProxiesSymbolsMath，Number，String，Object 的新API 透彻掌握Promise的使用，读这篇就够了url：https://www.jianshu.com/p/fe5f173276bd知识点：实现方法1.new Promise(fn),创建一个新的Promise对象并传入第一个执行方法。2.resolve。成功的执行方法3.reject。失败的执行方法4.catch。失败的捕获。5.then。链式调用下一步。原理：内部使用一个数组报错需要执行的所有方法，使用then来添加新的方法。旧的方法执行完毕之后检测数组，如果有新的就执行123456789101112131415161718192021class Promise &#123; result: any; callbacks = []; failbacks = []; constructor(fn) &#123; fn(this.resolve.bind(this), this.reject.bind(this)); &#125; resolve(res) &#123; if (this.callbacks.length &gt; 0) this.callbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this)); &#125; reject(res) &#123; this.callbacks = []; if (this.failbacks.length &gt; 0) this.failbacks.shift()(res, this.resolve.bind(this), this.reject.bind(this)); &#125; catch (fn) &#123; this.failbacks.push(fn); &#125; then(fn) &#123; this.callbacks.push(fn); return this; &#125;&#125; 调用示例：1234567891011var a = new Promise(function(resolve, reject) &#123; setTimeout(function() &#123; resolve(\"成功\"); &#125;, 1000);&#125;).then(function(result, resolve, reject) &#123; console.log(result) reject(\"失败\")&#125;).catch (function(err) &#123; console.log(err);&#125;); es6写法：1234567891011121314151617//创建promisevar promise = new Promise(function(resolve, reject) &#123; // 进行一些异步或耗时操作 if ( /*如果成功 */ ) &#123; resolve(\"Stuff worked!\"); &#125; else &#123; reject(Error(\"It broke\")); &#125;&#125;);//绑定处理程序promise.then(function(result) &#123; //promise成功的话会执行这里 console.log(result); // \"Stuff worked!\"&#125;, function(err) &#123; //promise失败会执行这里 console.log(err); // Error: \"It broke\"&#125;); 4.前端算法相关url:https://github.com/qianbin01/frontend_train#sort知识点冒泡排序 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样 快速排序: 1) 首先，在数组中选择一个中间项作为主元2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成 选择排序: 大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2) 归并排序: 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组 堆排序： 堆排序把数组当中二叉树来排序而得名。1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2L；4）节点R的右子节点为2R + 1本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个 5.javaScript常用知识点url: https://github.com/qianbin01/frontend_train#javascript知识点map,reduce,filter的用法js数据类型(7种) 1.number;2.string;3.boolean;4.undefined;5.null;6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。7.Object.（包括Object，Array，Function）闭包12345678function foo(x) &#123; var tmp = 3; return function (y) &#123; alert(x + y + (++tmp)); &#125;&#125;var bar = foo(2); // bar 现在是一个闭包bar(10); 结果是16es6通常用let const块级作用域代替，闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题 什么是立即执行函数？使用立即执行函数的目的是什么？1234567891011//常见两种方式1.(function()&#123;...&#125;)() (function(x)&#123; console.log(x); &#125;)(12345)2.(function()&#123;...&#125;()) (function(x)&#123; console.log(x); &#125;(12345))//作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如（function(window)&#123;...&#125;(window)） async/await 语法深浅拷贝数组去重思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。思路4（最常用）：使用es6 set12let arr= [1, 2, 3, 3, 5, 7, 2, 6, 8];console.log([...new Set(arr)]); JS原型","categories":[{"name":"前端周刊","slug":"前端周刊","permalink":"http://ye63.github.io/categories/前端周刊/"}],"tags":[{"name":"优质文章分享","slug":"优质文章分享","permalink":"http://ye63.github.io/tags/优质文章分享/"}]},{"title":"NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection.","slug":"NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection","date":"2018-09-07T07:54:30.000Z","updated":"2018-09-11T07:43:09.047Z","comments":true,"path":"2018/09/07/NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection/","link":"","permalink":"http://ye63.github.io/2018/09/07/NodeJS连接MySQL时遇到的问题 Error Connection lost The server closed the connection/","excerpt":"","text":"今天用NodeJS连接Mysql时遇到点折磨人的问题，记录下解决方法。 NodeJS和Mysql都已经正确安装了，但是NodeJS和Mysql的连接出现问题，查找网上一些解决办法都不能解决问题。报错如下： image 经过查找定位，在mysql官网找到了解决方案： 官网链接 》》MySQL Connector/Node.jsMySql 针对node的连接器对mysql的版本有要求，且需要另外的插件： image 然后下载的最新版的mysql mysql-installer-community-5.7.20.0.msi 执行 :123npm install mysqlnpm install @mysql/xdevapi 运行官方示例，成功。","categories":[{"name":"前端","slug":"前端","permalink":"http://ye63.github.io/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://ye63.github.io/tags/node/"}]},{"title":"使用hexo搭建github.io博客","slug":"使用hexo搭建github-io博客","date":"2018-09-07T02:57:11.000Z","updated":"2018-09-11T07:43:09.092Z","comments":true,"path":"2018/09/07/使用hexo搭建github-io博客/","link":"","permalink":"http://ye63.github.io/2018/09/07/使用hexo搭建github-io博客/","excerpt":"","text":"Introduction 回顾一下我三年搭建博客的历程，最初是选择wordpress，Wordpress全部由php编写，数组库采用MySQL。优点：用户只需要将Wordpress的源代码复制到网站根目录下，然后访问网站，之后的安装操作全部在浏览器上完成。即使不是软件行业的人，也可以在几分钟之内完成安装工作。甚至很多虚拟主机供应商都提供了Wordpress的一键式安装工具。用户连上传文件的步骤都省了。缺点：项目太臃肿了，Wordpress耗损CPU严重，不容易操作，运行稍慢。尤其是后期文章数目较多的时候，想要登陆下网站的管理后台，心态简直是抓狂的。loading了好久，有时候还会失败，发一篇文章也很费劲，索性就不维护了。后来在github网站上找到一个vue模板：github地址和demo预览二次开发了一下，的确是实现了很多功能，也挺轻便的，样式也可以自定义，博客可以直接写在github的issue，很方便，用了三个月后才发现百度的搜索引擎居然只收录了首页，搜索引擎的基础爬虫的原理就是抓取你的url，然后获取你的html源代码并解析。 而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo并不友好。而且github api在国内访问速度也没有想象中那么快，可能是github的CDN被墙屏了。 使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品.灵活性高.但是有较大的难度,但是这对于一个熟悉git操作的前端开发工程师来说，都不算什么的。重点是hexo和github.io的域名和服务器都是免费的。当然也可以选择用自己的服务器和域名。 Quick Start安装 node,git，注册好github账号 (网站有很多教程，安装方法这里就不详细展开了，注意:github账号用户名一定不能有大写.) 安装hexo: 1npm install -g hexo 创建hexo文件夹:cmd窗口切换到对应的目录下,然后执行: hexo init也可以在 E:\\hexo 下右键,选择git bash,在窗口中执行hexo init自动安装了需要的文件. 安装依赖:继续执行: npm install 完成本地安装:继续在 E:\\hexo 下执行: hexo generate 继续执行: hexo server 然后在打开浏览器 localhost:4000 ,就可以看到,本地已经安装好了. 在github上创建博客仓库: image 跳转的后如下填写:(其中Repository name的格式是 ‘用户名’.github.io ),然后点创建仓库，Repository name必须和用户名（Owner）一致，不能有大写字母 image image 创建SSH keys监测是否有已经存在的SSH keys:打开 git bash 终端(可以在 E:\\hexo 下右键打开,也可以直接在开始菜单里打开) 执行: $ ls -al ~/.ssh image 如果没有的话,就生成一个SSH keys: 写自己的邮箱$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 然后会出现:12Generating public/private rsa key pair.Enter file in which to save the key (/Users/you/.ssh/id_rsa): 就是让你输入SSH keys要保存在哪里,一般不用改,就直接回车就好了.输入一个密码,这个密码后面会用到,所以要记住咯 保存SSH keys:创建成功后,他会提示你SSH keys保存在哪里:1234567Your identification has been saved in /Users/you/.ssh/id_rsa.# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.# The key fingerprint is:# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 找到SSH keys:根据上一步里告诉你的路径,找到保存SSH keys的地方,我的是在 C:\\Users\\2000104591.ssh 其中 id_rsa.pub 就是SSH keys 如果为了防止以后找不到,可以把他们自己另存到其它地方 为github仓库添加SSH keys然后把创建的id_rsa.pub里的内容复制到Key里去,Title部分随便填. 点击’Add key’ 添加的过程中,还要再输入一次github的密码 image 配置_config.yml文件并发布:在 E:\\hexo(文件根目录下) 下,有一个文件叫 _config.yml ,打开它,拉到最底下,做如下修改: 然后再执行: hexo generate hexo deploy 然后访问: https://ye63.github.io/ (用户名改成自己的),就可以看到了. 快捷命令hexo 新建一篇文章给它添加分类和标签:1hexo new &quot;移动端限制input框只能输入数字&quot; 通过mou编辑器打开：添加tags和categories123456789---title: title #文章標題date: 2016-06-01 23:47:44 #文章生成時間categories: &quot;Hexo教程&quot; #文章分類目錄 可以省略tags: #文章标签 可以省略 - 标签1 - 标签2description: #你對本頁的描述 可以省略--- 发布1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 创建新页面1hexo new page &quot;about&quot;","categories":[{"name":"Hexo教程","slug":"Hexo教程","permalink":"http://ye63.github.io/categories/Hexo教程/"}],"tags":[]},{"title":"ES6学习笔记","slug":"小邵教你玩转es6","date":"2018-09-07T02:57:11.000Z","updated":"2018-09-17T05:46:38.996Z","comments":true,"path":"2018/09/07/小邵教你玩转es6/","link":"","permalink":"http://ye63.github.io/2018/09/07/小邵教你玩转es6/","excerpt":"","text":"前言：大家好，我叫邵威儒，大家都喜欢喊我小邵，学的金融专业却凭借兴趣爱好入了程序猿的坑，从大学买的第一本vb和自学vb，我就与编程结下不解之缘，随后自学易语言写游戏辅助、交易软件，至今进入了前端领域，看到不少朋友都写文章分享，自己也弄一个玩玩，以下文章纯属个人理解，便于记录学习，肯定有理解错误或理解不到位的地方，意在站在前辈的肩膀，分享个人对技术的通俗理解，共同成长！ 后续我会陆陆续续更新javascript方面，尽量把javascript这个学习路径体系都写一下包括前端所常用的es6、angular、react、vue、nodejs、koa、express、公众号等等都会从浅到深，从入门开始逐步写，希望能让大家有所收获，也希望大家关注我~ 文章列表：https://juejin.im/user/5a84f871f265da4e82634f2d/posts Author: 邵威儒Email: 166661688@qq.comWechat: 166661688github: https://github.com/iamswr/ 接下来我主要给大家讲下我对常用的es6的理解，我们工作当中，其实有很多用不上的，如果想详细了解的话可以看看阮一峰老师的es6：http://es6.ruanyifeng.com/ 这篇文章主要让你学会工作当中常用的es6技巧，以及扩展如实现数据双向绑定，class用es5如何实现、如何给伪数组添加迭代器等等。 var、let、const1234567891011121314151617181920212223242526272829303132333435// 1.var存在变量作用域的提升console.log(a) // 打印输出 undefinedvar a = 1// 怎么理解作用域的提升呢？// var str = &apos;hello swr&apos;// function()&#123;// console.log(str) // 打印输出 undefined// var str = &apos;goodbye swr&apos;// &#125;// test()// 上面这段代码实际上是var str = &apos;hello swr&apos;function()&#123; var str console.log(str) // 打印输出undefined // 实际上就是var声明的变量，拿到 // 当前作用域的最顶层，而此时尚未赋值 // 只是声明，所以打印出undefined，而非当运行 // 到这段代码时才声明，优先声明， // 当运行到那行的时候，实际上是赋值 // 同样的，function xx()&#123;&#125;也存在作用域提升 str = &apos;goodbye swr&apos;&#125;test()// var 不存在块级作用域的概念// 我的理解是在es6之前，是没有块级作用域的概念，// 变量只有遇到函数的时候才会变为局部变量&#123; var str 1 = &apos;hello swr&apos;&#125;console.log(str1) // 打印输出 hello swr 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 2.let// 2.1 不存在变量作用域提升，这样可以避免了我们还没声明变量就拿变量来用// 2.2 同一作用域的同一个变量不能够重复声明，避免我们重复声明变量// 2.3 let声明的变量不会到全局上// 2.4 let和代码块&#123;&#125;结合使用会形成块级作用域// 2.1// console.log(a) // 报错，a未声明// let a = &apos;hello swr&apos;// 2.2// let a = &apos;hello swr&apos;// let a = &apos;hello swr&apos; // 报错，变量被重复声明// 2.3// let a = &apos;hello swr&apos;// console.log(window.a) // undefined// 2.4// 在代码块以外调用str2，会报错&#123; let str2 = &apos;hello swr&apos;&#125;console.log(str2) // 报错，未找到变量// 上面这种写法，也有点类型es6之前的立即执行函数(function()&#123; var str2 = &apos;hello swr&apos;&#125;)()// 一个例子// 使用var，会发现最终console.log中打印的i都是3// 因为for循环不是函数，而此时var i是处于全局当中// for循环是同步代码，所以会执行完同步代码后// 再执行setTimeout的异步代码，此时i已为3，所以打印出来都是3for(var i = 0;i &lt; 3;i++)&#123; setTimeout(function()&#123; console.log(i) &#125;,1000)&#125;// 那么我们用let试下// let和代码块结合起来使用会形成块级作用域// 那么当for时，这3个setTimeout会分别在3个不同的块级作用域// 当执行setTimeout的console.log(i)时，会先寻找最近的块级作用域中的i// 所以会依次打印出0 1 2for(let j = 0;j &lt; 3;j++)&#123; setTimeout(function()&#123; console.log(i) &#125;,1000)&#125; 1234567891011121314151617// 3.const// 3.1 const和let基本上可以说是完全一致的，但是const声明的对象不能更改其指向的引用地址（即堆区）// 3.1// 当用普通值赋值给const声明的变量后，再重新赋值时// 值引用会被更改，所以会报错const STR1 = &apos;hello swr&apos;STR1 = &apos;goodbye swr&apos; // 报错,Assignment to constant variable// 当我们修改这个引用地址里面的内容时，则不会报错// 因为这个变量是指向这个引用地址的const OBJ = &#123;name:&quot;swr&quot;&#125;OBJ.name = &apos;hello swr&apos;console.log(OBJ) // &#123;name:&quot;hello swr&quot;&#125;// 但是当我们把这个变量重新赋值一个引用地址时，则会报错OBJ = &#123;&#125; // 报错 解构赋值解构赋值主要分为对象的解构和数组的解构，在没有解构赋值的时候，我们赋值是这样的1234let arr = [0,1,2]let a = arr[0]let b = arr[1]let c = arr[2] 这样写很繁琐，那么我们有没办法既声明，又赋值，更优雅的写法呢？肯定是有的，那就是解构赋值，解构赋值，简单理解就是等号的左边和右边相等。 数组的解构赋值12345let arr = [0,1,2]let [a,b,c] = arrconsole.log(a) // 0console.log(b) // 1console.log(c) // 2 但是很多时候，数据并非一一对应的，并且我们希望得到一个默认值1234567let arr = [,1,2]let [a=&apos;我是默认值&apos;,b,c] = arrconsole.log(a) // &apos;我是默认值&apos;console.log(b) // 1console.log(c) // 2// 从这个例子可以看出，在解构赋值的过程中，a=undefined时，会使用默认值// 那么当a=null时呢？当a=null时，那么a就不会使用默认值，而是使用null 12345678// 数组的拼接let a = [0,1,2]let b = [3,4,5]let c = a.concat(b)console.log(c) // [0,1,2,3,4,5]let d = [...a,...b]console.log(d) // [0,1,2,3,4,5] 12345678910111213141516// 数组的克隆// 假如我们简单地把一个数组赋值给另外一个变量let a = [0,1,2,3]let b = ab.push(4)console.log(a) // [0,1,2,3,4]console.log(b) // [0,1,2,3,4]// 因为这只是简单的把引用地址赋值给b，而不是重新开辟一个内存地址，所以// a和b共享了同一个内存地址，该内存地址的更改，会影响到所有引用该地址的变量// 那么用下面的方法，把数组进行克隆一份，互不影响let a = [0,1,2,3]let b = [...a]b.push(4)console.log(a) // [0,1,2,3]console.log(b) // [0,1,2,3,4] 对象的解构赋值对象的解构赋值和数组的解构赋值其实类似，但是数组的数组成员是有序的而对象的属性则是无序的，所以对象的解构赋值简单理解是等号的左边和右边的结构相同123let &#123;name,age&#125; = &#123;name:&quot;swr&quot;,age:28&#125;console.log(name) // &apos;swr&apos;console.log(age) // 28 对象的解构赋值是根据key值进行匹配12345// 这里可以看出，左侧的name和右侧的name，是互相匹配的key值// 而左侧的name匹配完成后，再赋值给真正需要赋值的Namelet &#123; name:Name,age &#125; = &#123; name:&apos;swr&apos;,age:28 &#125;console.log(Name) // &apos;swr&apos;console.log(age) // 28 那么当变量已经被声明了呢？12345let name,age// 需要用圆括号，包裹起来(&#123;name,age&#125; = &#123;name:&quot;swr&quot;,age:28&#125;)console.log(name) // &apos;swr&apos;console.log(age) // 28 变量能否也设置默认值？1234let &#123;name=&quot;swr&quot;,age&#125; = &#123;age:28&#125;console.log(name) // &apos;swr&apos;console.log(age) // 28// 这里规则和数组的解构赋值一样，当name = undefined时，则会使用默认值 12345let [a] = [&#123;name:&quot;swr&quot;,age:28&#125;]console.log(a) // &#123;name:&quot;swr&quot;,age:28&#125;let &#123; length &#125; = &quot;hello swr&quot;console.log(length) // 9 1234567function ajax(&#123;method,url,type=&apos;params&apos;&#125;)&#123; console.log(method) // &apos;get&apos; console.log(url) // &apos;/&apos; console.log(type) // &apos;params&apos;&#125;ajax(&#123;method:&quot;get&quot;,url:&quot;/&quot;&#125;) 扩展运算符我们先看下代码12345678910111213// 在以往，我们给函数传不确定参数数量时，是通过arguments来获取的function sum() &#123; console.log(arguments) // &#123; &apos;0&apos;: 1, &apos;1&apos;: 2, &apos;2&apos;: 3, &apos;3&apos;: 4, &apos;4&apos;: 5, &apos;5&apos;: 6 &#125; // 我们可以看出，arguments不是一个数组，而是一个伪数组 let total = 0 let &#123; length &#125; = arguments for(let i = 0;i &lt; length;i++)&#123; total += arguments[i] &#125; return total&#125;console.log(sum(1,2,3,4,5,6)) // 21 1234567// 接下来我们用扩展运算符看看function sum(...args)&#123; // 使用...扩展运算符 console.log(args) // [ 1, 2, 3, 4, 5, 6 ] args是一个数组 return eval(args.join(&apos;+&apos;))&#125;console.log(sum(1,2,3,4,5,6)) // 21 得到的args是一个数组，直接对数组进行操作会比对伪数组进行操作更加方便，还有一些注意点需要注意123456789101112131415// 正确的写法 扩展运算符只能放在最后一个参数function sum(a,b,...args)&#123; console.log(a) // 1 console.log(b) // 2 console.log(args) // [ 3, 4, 5, 6 ]&#125;sum(1,2,3,4,5,6)// 错误的写法 扩展运算符只能放在最后一个参数function sum(...args,a,b)&#123; // 报错&#125;sum(1,2,3,4,5,6) 我们可以对比下扩展运算符的方便之处1234567891011// 以往我们是这样拼接数组的let arr1 = [1,2,3]let arr2 = [4,5,6]let arr3 = arr1.concat(arr2)console.log(arr3) // [ 1, 2, 3, 4, 5, 6 ]// 现在我们用扩展运算符看看let arr1 = [1,2,3]let arr2 = [4,5,6]let arr3 = [...arr1,...arr2]console.log(arr3) // [ 1, 2, 3, 4, 5, 6 ] 1234567891011// 以往我们这样来取数组中最大的值function max(...args)&#123; return Math.max.apply(null,args)&#125;console.log(max(1,2,3,4,5,6)) // 6// 现在我们用扩展运算符看看function max(...args)&#123; return Math.max(...args) // 把args [1,2,3,4,5,6]展开为1,2,3,4,5,6&#125;console.log(max(1,2,3,4,5,6)) // 6 1234567891011121314151617// 扩展运算符可以把argument转为数组function max()&#123; console.log(arguments) // &#123; &apos;0&apos;: 1, &apos;1&apos;: 2, &apos;2&apos;: 3, &apos;3&apos;: 4, &apos;4&apos;: 5, &apos;5&apos;: 6 &#125; let arr = [...arguments] console.log(arr) // [1,2,3,4,5,6]&#125;max(1,2,3,4,5,6)// 但是扩展运算符不能把伪数组转为数组（除了有迭代器iterator的伪数组，如arguments）let likeArr = &#123; &quot;0&quot;:1,&quot;1&quot;:2,&quot;length&quot;:2 &#125;let arr = [...likeArr] // 报错 TypeError: likeArr is not iterable// 但是可以用Array.from把伪数组转为数组let likeArr = &#123; &quot;0&quot;:1,&quot;1&quot;:2,&quot;length&quot;:2 &#125;let arr = Array.from(likeArr)console.log(arr) // [1,2] 对象也可以使用扩展运算符 123456789101112// 以往我们这样合并对象let name = &#123; name:&quot;邵威儒&quot; &#125;let age = &#123; age:28 &#125;let person = &#123;&#125;Object.assign(person,name,age)console.log(person) // &#123; name: &apos;邵威儒&apos;, age: 28 &#125;// 使用扩展运算符let name = &#123; name:&quot;邵威儒&quot; &#125;let age = &#123; age:28 &#125;let person = &#123;...name,...age&#125;console.log(person) // &#123; name: &apos;邵威儒&apos;, age: 28 &#125; 需要注意的是，通过扩展运算符和Object.assign对对象进行合并的行为，是属于浅拷贝，那么我们在开发当中，经常需要对对象进行深拷贝，接下来我们看看如何进行深拷贝。 123456789101112131415// 方法一：利用JSON.stringify和JSON.parselet swr = &#123; name:&quot;邵威儒&quot;, age:28&#125;let swrcopy = JSON.parse(JSON.stringify(swr))console.log(swrcopy) // &#123; name:&quot;邵威儒&quot;,age:28 &#125;// 此时我们修改swr的属性swr.age = 29console.log(swr) // &#123; name:&quot;邵威儒&quot;,age:29 &#125;// 但是swrcopy却不会受swr影响console.log(swrcopy) // &#123; name:&quot;邵威儒&quot;,age:28 &#125;// 这种方式进行深拷贝，只针对json数据这样的键值对有效// 对于函数等等反而无效，不好用，接着继续看方法二、三。 1234567891011121314151617181920212223242526272829303132333435363738394041// 方法二：function deepCopy(fromObj,toObj) &#123; // 深拷贝函数 // 容错 if(fromObj === null) return null // 当fromObj为null if(fromObj instanceof RegExp) return new RegExp(fromObj) // 当fromObj为正则 if(fromObj instanceof Date) return new Date(fromObj) // 当fromObj为Date toObj = toObj || &#123;&#125; for(let key in fromObj)&#123; // 遍历 if(typeof fromObj[key] !== &apos;object&apos;)&#123; // 是否为对象 toObj[key] = fromObj[key] // 如果为普通值，则直接赋值 &#125;else&#123; toObj[key] = new fromObj[key].constructor // 如果为object，则new这个object指向的构造函数 deepCopy(fromObj[key],toObj[key]) // 递归 &#125; &#125; return toObj&#125;let dog = &#123; name:&quot;小白&quot;, sex:&quot;公&quot;, firends:[ &#123; name:&quot;小黄&quot;, sex:&quot;母&quot; &#125; ]&#125;let dogcopy = deepCopy(dog)// 此时我们把dog的属性进行修改dog.firends[0].sex = &apos;公&apos;console.log(dog) // &#123; name: &apos;小白&apos;, sex: &apos;公&apos;, firends: [ &#123; name: &apos;小黄&apos;, sex: &apos;公&apos; &#125;] &#125;// 当我们打印dogcopy，会发现dogcopy不会受dog的影响console.log(dogcopy) // &#123; name: &apos;小白&apos;, sex: &apos;公&apos;, firends: [ &#123; name: &apos;小黄&apos;, sex: &apos;母&apos; &#125; ] &#125; 123456789101112131415161718192021222324252627// 方法三：let dog = &#123; name:&quot;小白&quot;, sex:&quot;公&quot;, firends:[ &#123; name:&quot;小黄&quot;, sex:&quot;母&quot; &#125; ]&#125;function deepCopy(obj) &#123; if(obj === null) return null if(typeof obj !== &apos;object&apos;) return obj if(obj instanceof RegExp) return new RegExp(obj) if(obj instanceof Date) return new Date(obj) let newObj = new obj.constructor for(let key in obj)&#123; newObj[key] = deepCopy(obj[key]) &#125; return newObj&#125;let dogcopy = deepCopy(dog)dog.firends[0].sex = &apos;公&apos;console.log(dogcopy) Object.definePropertyObject.defineProperty这个并不是es6的语法，这个是给一个对象，添加属性，但是目前框架很多实用这个方法，来实现数据劫持，也就是数据双向绑定 1234// 平时我们这样给一个对象添加属性let obj = &#123;str:&quot;hello swr&quot;&#125;obj.str = &apos;goodbye swr&apos;console.log(obj.str) // &apos;goodbye swr&apos; 那么当我们想在给一个对象，读取值或写入值时，进行别的操作，该怎么做呢？1234567891011121314151617// 使用Object.defineProperty()// 接收的第一个参数为对象，第二个参数为属性名，第三个参数为配置对象let obj = &#123;&#125;Object.defineProperty(obj,&apos;name&apos;,&#123; enumerable:true,// 是否可枚举，默认值 true // 如果为false的话，打印这个obj对象，是看不到name这个属性 writable:true, // 是否可写，默认值 true // 如果为false的话，给name赋值，不会生效 configurable:true, // 是否可配置（是否可删除），默认值 true // 如果为true，delete obj.name，再打印obj，则显示&#123;&#125; // 如果为false，delete obj.name，再打印obj,则显示&#123;name:undefined&#125; value:&apos;swr&apos;, // name对应的值&#125;)// 上面的写法其实和下面的写法是一样的let obj = &#123;&#125;obj.name = &apos;swr&apos; 那么既然一样，我们有必要写这么大串的代码吗？ 其实核心是get和set，我们继续往下看123456789101112131415161718// 需要注意的是，当使用get set时，则不能使用value和writablelet obj = &#123;&#125;let strObject.defineProperty(obj,&apos;name&apos;,&#123; enumerable:true, configurable:true, get()&#123; // 读，当我们读取时，则会执行到get，比如obj.name // return &apos;swr&apos; // 当我们obj.name进行读取时，会返回&apos;swr&apos; return str &#125;, set(newValue)&#123; // 写，当我们写入时，则会执行到set，比如obj.name = &apos;swr&apos; // 并且会把newValue作为参数传进去 str = newValue &#125;&#125;)obj.name = &apos;swr&apos; // 写入console.log(obj.name) // &apos;swr&apos; // 读取 这样一来，我们可以在get set函数中，写出对应的业务逻辑， 包括很多框架底层，例如123456// 一般不再选择这样的写法Fn.prototype.xxx = xxx// 更多的是选择这样的写法// 这样的好处就是当读取值的时候，可以做一系列我们想做的事情Object.defineProperty(Fn.prototype,&apos;xxx&apos;,&#123;...&#125;) 那么我们实现数据双向绑定呢？这个问题在面试当中，会经常问这个问题，但是面试官更希望听到的是具体底层的实现方式，那么接下来我们也实现一下吧~ （ 简陋版的……(#^.^#) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;对象的数据双向绑定&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&apos;input&apos; type=&quot;&quot; name=&quot;&quot; value=&quot;&quot;&gt; &lt;script&gt; let el = document.getElementById(&apos;input&apos;) // 1. 获取输入框的dom节点 let obj = &#123; // 2. 创建一个对象 name: &quot;&quot; &#125; function oberseve(obj) &#123; // 3. 对对象进行观察 if (typeof obj !== &apos;object&apos;) return // 3.1 判断参数是否为对象 for (let key in obj) &#123; // 3.2 对对象进行遍历，目的是为了把每个属性都设置get/set defineReactive(obj, key, obj[key]) oberseve(obj[key]) // 3.3 obj[key] 有可能还是一个函数，需要递归，给obj[key]里的属性进行设置get/set &#125; &#125; function defineReactive(target, property, value) &#123; // 4. 使用Object.defineProperty Object.defineProperty(target, property, &#123; get() &#123; el.value = value // 4.1 当读取时，把值赋值给input框 return value &#125;, set(newVal) &#123; el.value = newVal // 4.1 当设置时，把赋值给input框 value = newVal &#125; &#125;) &#125; oberseve(obj) // 5.执行该函数，对obj对象里的属性进行设置get/set el.addEventListener(&apos;input&apos;, function () &#123; // 6.给输入框绑定input事件 obj.name = this.value // 7.当输入框输入内容时，我们会把输入框的 // 内容赋值给obj.name，触发obj.name的set方法 &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 当我们在输入框输入内容时，再到控制台输入obj.name查看这个值时，会发现打印出”hello swr” 当我们在控制台，给obj.name赋值时，会发现输入框的内容也会作出相应更改 这样我们就实现了一个简陋版的数据双向绑定了，但是这也是有缺点的，这个只是针对对象进行了数据双向绑定,而尤大大的Vuejs就是基于Object.defineProperty实现的。 除了Object.defineProperty可以实现数据双向绑定之外，还有其他方式吗？ 肯定是有其他方式可以实现的，利用es6的proxy代理也可以实现数据双向绑定，但是目前的框架还是比较少使用这种方式。 ProxyProxy代理也可以进行数据劫持，但是和Object.defineProperty不同的是，Proxy是在数据外层套了个壳，然后通过这层壳访问内部的数据，目前Proxy支持13种方式。 Proxy，我的理解是在数据外层套了个壳，然后通过这层壳访问内部的数据，就像下面的图 123456789101112131415161718192021222324252627282930let dog = &#123; name:&quot;小黄&quot;, firends:[&#123; name:&quot;小红&quot; &#125;]&#125;// 1.首先new一个Proxy对象let proxy = new Proxy(dog,&#123; // 2.参数一为需要代理的数据，参数二为上图可以代理的13种的配置对象 get(target,property)&#123; // 3.参数1为上面dog对象，参数2为dog的属性 console.log(&apos;get被监控到了&apos;) return target[property] &#125;, set(target,property,value)&#123; // 4.参数1为上面dog对象，参数2为dog的属性，参数3为设置的新值 // 有点类似Object.defineProperty console.log(&apos;set被监控到了&apos;) target[property] = value &#125;&#125;)// 那么接下来我们设置一下这个属性// dog.name = &apos;小红&apos; // set值时，发现不会打印 &apos;set被监控到了&apos;// dog.name // get值时，发现不会打印 &apos;get被监控到了&apos;// 思考：为什么在set/get值的时候不会打印出来我们需要的东西呢？// 上面说得很明白了，proxy相当于是一个壳，代理我们需要监控的数据，也就是我们要通过proxy来访问内部数据才会被监控到proxy.name = &apos;小红&apos; // 打印输出 &apos;set被监控到了&apos;proxy.name // 打印输出 &apos;get被监控到了&apos; 1234567891011121314// Reflect经常和Proxy搭配使用// 比如我们上面的例子中let proxy = new Proxy(dog,&#123; get(target,property)&#123; console.log(&apos;get被监控到了&apos;) return target[property] &#125;, set(target,property,value)&#123; console.log(&apos;set被监控到了&apos;) // target[property] = value // 这里的target[property] = value 可以用下面的写法 Reflect.set(target,property,value) &#125;&#125;) 123456789101112// 那么我们该怎样实现深度的数据劫持呢？let dog = &#123; name:&quot;小黄&quot;, firend:&#123; name:&quot;小红&quot; &#125;&#125;// 我们首先写一个set方法，希望是通过这样来调用set(dog.firend,funtion(obj)&#123; console.log(obj) // &#123; name:&quot;小红&quot; &#125; 回调函数中的obj代表的是dog.firend的对象&#125;) 123456789101112131415161718192021// 实现let dog = &#123; name:&quot;小黄&quot;, firend:&#123; name:&quot;小红&quot; &#125;&#125;function set(obj,callback)&#123; let proxy = new Proxy(obj,&#123; set(target,property,value)&#123; target[property] = value &#125; &#125;) // 最后把proxy传给我们的回调函数 callback(proxy)&#125;set(dog.firend,function(obj)&#123; console.log(obj) // &#123; name:&quot;小红&quot; &#125; 实际就是从set函数中传出来的proxy对象&#125;) Symbol在js中，常见的数据类型有undefined null string number boolean object，而es6中，则新增了第七种数据类型symbol。 symbol会生成一个独一无二的值，为常量 1234567891011let s1 = Symbol()let s2 = Symbol()console.log(s1 === s2) // false// 因为Symbol生成的是一个独一无二的值，为常量，一般是作为对象的属性let obj = &#123; [s1]:1, [s2]:2&#125;console.log(obj) // &#123; [Symbol()]: 1, [Symbol()]: 2 &#125; Symbol.for与Symbol差不多，但是Symbol.for会生成一个唯一的标识 123456let s1 = Symbol.for(&apos;foo&apos;)let s2 = Symbol.for(&apos;foo&apos;)console.log(s1 === s2) // true// 也可以通过Symbol.keyFor把标识找出来console.log(Symbol.keyFor(s1)) // foo ArrayArray的常用方法有from reduce map forEach findIndex find every some filter includes等等 用法也很简单，我主要讲一下from和reduce。 Array.from把伪数组(包括不含有迭代器的伪数组)转化为数组 12345// 声明一个伪数组let likeArr = &#123; 0:1,1:2,2:3,length:3 &#125;// 转换为数组Array.from(likeArr) // [1,2,3] 那么我们用前面所说的扩展运算符，能够把伪数组转为数组吗？12345// 声明一个伪数组let likeArr = &#123; 0:1,1:2,2:3,length:3 &#125;// 用扩展运算符转换为数组let arr = [...likeArr] // 报错 likeArr is not iterable likeArr is not iterable意思是，likeArr这个伪数组没有迭代器， 那么可以看出，Array.from和…扩展运算符的区别了， Array.from可以将伪数组（包含没有迭代器的伪数组）转为数组， 而…扩展运算符只能把拥有迭代器的伪数组转为数组，如arguments、map、set， 那么我们如果想用…扩展运算符转为数组，该怎么办呢？1234567891011// 既然扩展运算符只能把有迭代器的伪数组转为数组，// 那么我们就给伪数组添加一个迭代器// 迭代器iterator需要一个generator生成器生成// 我们给这个伪数组新增一个[Symbol.iterator]的迭代器let likeArr = &#123; 0:1,1:2,2:3,length:3,[Symbol.iterator]:function *() &#123; for(let i = 0;i &lt; this.length;i++)&#123; yield this[i] &#125;&#125; &#125;console.log([...likeArr]) // [1,2,3] reduce1234567891011let arr = [1,2,3,4,5]// 参数一：前一个值// 参数二：下一个值（当前值）// 参数三：当前的索引// 参数四：arr数组let total = arr.reduce(function(prev,next,currentIndex,arr)&#123; return prev + next&#125;)console.log(total) // 15 123456789101112131415161718192021222324// 那么reduce是怎样一个运行流程呢？// 我们一步步拆解出来看let arr = [1,2,3,4,5]// arr会一直是[1,2,3,4,5]// 第一步：此时的prev为1，next为2，currentIndex为1let total = arr.reduce(function(prev,next,currentIndex,arr)&#123; return prev + next // 1+2=3 并且把3当做下一次的prev&#125;)// 第二步：此时的prev为3，next为3，currentIndex为2let total = arr.reduce(function(prev,next,currentIndex,arr)&#123; return prev + next // 3+3=6 并且把6当做下一次的prev&#125;)// 第三步：此时的prev为6，next为4，currentIndex为3let total = arr.reduce(function(prev,next,currentIndex,arr)&#123; return prev + next // 6+4=10 并且把10当做下一次的prev&#125;)// 第四步：此时的prev为10，next为5，currentIndex为4let total = arr.reduce(function(prev,next,currentIndex,arr)&#123; return prev + next // 10+5=15 最终结果会作为返回值返回&#125;) 那我们自己实现一个reduce，看看是如何实现的123456789101112131415Array.prototype.myReduce = function (callback) &#123; let prev = this[0] for(let i = 0;i &lt; this.length-1;i++)&#123; prev = callback(prev,this[i+1],i+1,this) &#125; return prev&#125;let arr = [1,2,3,4,5]let total = arr.myReduce(function(prev,next,currentIndex,arr)&#123; console.log(prev,next) return prev + next&#125;)console.log(total) // 15 map映射可以把数组返回成一个映射后的数组 12let arr = [1,2,3].map(item =&gt; item+1)console.log(arr) // [2,3,4] find查找，查找到后不再继续查找，查找不到则返回undefined，内部返回true的话，则返回当前item，1234let arr = [1,2,3,4]let val = arr.find(item=&gt;item === 3)console.log(val) // 3 every每个值是否满足条件，如果是则返回true，如果不是则返回false 123456789101112let arr = [1,2,3,4]let isTrue = arr.every(item =&gt; &#123; return item &gt; 0&#125;)console.log(isTrue) // truelet isTrue2 = arr.every(item =&gt; &#123; return item &gt; 2&#125;)console.log(isTrue2) // false some是否有其中一个值满足条件，如果是则返回true，如果不是则返回false 123456789101112let arr = [1,2,3,4]let isTrue = arr.every(item =&gt; &#123; return item &gt; 2&#125;)console.log(isTrue) // truelet isTrue2 = arr.every(item =&gt; &#123; return item &gt; 4&#125;)console.log(isTrue2) // false filter过滤，在回调函数中返回的为false的话，相当于过滤掉当前项，返回一个过滤后的数组 1234567let arr = [1,2,3,4]let newArr = arr.filter(item=&gt;&#123; return item &gt; 2&#125;)console.log(newArr) // [3,4] includes基本和some一样 Setset是放不重复的项，也就是去重 12let set = new Set([1,2,3,4,3,2,1])console.log(set) // Set &#123; 1, 2, 3, 4 &#125; Set有几个常用的方法，add clear delete entries 12345678910111213141516171819202122// addlet set = new Set([1,2,3,4,3,2,1])set.add(5)console.log(set) // Set &#123; 1, 2, 3, 4, 5 &#125;// 添加一个已有的值，则不会添加进去set.add(1)console.log(set) // Set &#123; 1, 2, 3, 4, 5 &#125;// deleteset.delete(3)console.log(set) // Set &#123; 1, 2, 4, 5 &#125;// entriesconsole.log(set.entries()) // SetIterator &#123; [ 1, 1 ], [ 2, 2 ], [ 4, 4 ], [ 5, 5 ] &#125;// clearset.clear()console.log(set) // Set &#123;&#125; Set常用于去重（并集） 123456function distinct(arr1,arr2)&#123; return [...new Set([...arr1,...arr2])]&#125;let arr = distinct([1,2,3],[2,3,4,5])console.log(arr) // [1,2,3,4,5] 求交集 12345678function intersect(arr1,arr2) &#123; // 利用Set里的方法has，来判断new Set(arr2)中是否含有item， // 如果含有，那么则是true，当为true时，filter函数则会保留该项 // 如果没有，则是false,当为false时，filter函数则不会保留该项 return arr1.filter(item =&gt; new Set(arr2).has(item))&#125;console.log(intersect([1,2,3],[2,3,4,5])) // [2,3] 求差集 12345function difference(arr1,arr2)&#123; return arr1.filter(item =&gt; !new Set(arr2).has(item))&#125;console.log(difference([1,2,3],[2,3,4,5])) // [1] Map也是集合，主要格式是 key =&gt; value，同样是不能放重复的key 1234567891011121314// 如果放重复的key会怎样呢？会被覆盖let map = new Map()map.set(&apos;name&apos;,&apos;邵威儒&apos;)map.set(&apos;name&apos;,&apos;swr&apos;)console.log(map) // Map &#123; &apos;name&apos; =&gt; &apos;swr&apos; &#125;// 取的话用getmap.get(&apos;name&apos;) // &apos;swr&apos;// 删的话用deletemap.delete(&apos;name&apos;)console.log(map) // Map &#123;&#125;// 很多方法和set差不多 1234567891011121314let map = new Map()map.set(&apos;name&apos;,&apos;邵威儒&apos;)map.set(&apos;age&apos;,28)// 一般使用for ... of ... 遍历for(let [key,value] of map.entries())&#123; console.log(key,value) // name 邵威儒 // age 28&#125;// 也可以用forEachmap.forEach(item =&gt; &#123; console.log(item) // 邵威儒 // 28&#125;) Set我用得最多的就是去重了，实际上Set Map我在开发中还是比较少会用到 Class类核心还是继承，而Class我认为是es5面向对象的语法糖。 在看Class之前建议看一下js的面向对象 https://juejin.im/post/5b8a8724f265da435450c591 看完后，我们开始进入es6的class 123456789101112131415161718192021222324252627// 语法// 声明一个类Class Person&#123; // 在constructor中写实例属性、方法 constructor()&#123; this.name = &quot;邵威儒&quot; // 实例属性 this.say = function()&#123; // 实例方法 console.log(&quot;我是实例方法上的say&quot;) &#125; &#125; // 原型方法 eat()&#123; console.log(&quot;我是原型方法上的eat&quot;) &#125; // 静态方法 也会被继承 static myName()&#123; return &quot;我是静态方法的myName&quot; &#125; // 在es6中静态属性不能这样写 static name = &quot;邵威儒&quot; 这样会报错 // 在es7中可以这样写static name = &quot;邵威儒&quot;&#125;let p = new Person() // new一个对象console.log(p.name) // 邵威儒p.eat() // 我是原型方法上的eatconsole.log(Person.myName()) // 我是静态方法的myName 那么子类怎么继承父类呢？ 12345678910111213141516171819202122232425// 父类class Person&#123; constructor()&#123; this.name = &quot;swr&quot; &#125; static myName()&#123; return &quot;Person&quot; &#125; eat()&#123; console.log(&apos;eat&apos;) &#125;&#125;// 子类// 子类Child继承父类Person// class Child extends Person实际上相当于// Child.prototype = Object.create(Person.prototype)// 打印出来可以看到// console.log(Child.prototype === Person.prototype) // false// console.log(Child.prototype.__proto__ === Person.prototype) // trueclass Child extends Person&#123; constructor()&#123; super() // 此处的super相当于Person.call(this) &#125;&#125; 前面我说了Class就类型es5面向对象的语法糖，为什么这样说呢？ 接下来我们看一下通过es5怎么模拟实现一个Class（可以用babel转一下，看看转为es5的代码是怎样的） 123456789101112131415let Child = (function()&#123; // 这种闭包的写法，好处可以把作用域封闭起来 // 在Child构造函数外写一系列变量 // 如 let name = &quot;邵威儒&quot;;let age = 28 等等… function Child()&#123; console.log(this) // 打印内部this，看看指向哪里 &#125; return Child&#125;)()// 通过直接调用函数，看看什么情况console.log(Child()) // 此时里面的this是指向全局的// 通过new来生成对象console.log(new Child()) // 此时里面的this是指向这个new出来的新对象 在es6中，不使用new来调用类，会报错 Class constructor Child cannot be invoked without &#39;new&#39; 12345class Child &#123; &#125;Child() // TypeError: Class constructor Child cannot be invoked without &apos;new&apos; 也就是说，想在es5中，模拟类，那么没使用new来调用构造函数时，也要抛出一个错误，那么我们会想到类的校验方法 123456789101112131415161718192021// * 1.声明一个类的校验方法// * 参数一：指向的构造函数// * 参数二：被调用时，this的指向function _classCallCheck(constructor,instance) &#123; // * 2.如果这个instance指向的不是constructor的话，意味着不是通过new来调用构造函数 if(!(instance instanceof constructor))&#123; // * 3.不满足时，则抛出异常 throw TypeError(&quot;Class constructor Child cannot be invoked without &apos;new&apos;&quot;) &#125;&#125;let Child = (function()&#123; function Child()&#123; // * 4.在调用该构造函数的时候，先执行以下类的校验方法 _classCallCheck(Child,this) &#125; return Child&#125;)()// 不通过new调用时，会报错Child() // 报错 Class constructor Child cannot be invoked without &apos;new&apos; 那么我们类上，有实例属性方法、原型属性方法、静态属性方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152function _classCallCheck(constructor,instance) &#123; if(!(instance instanceof constructor))&#123; throw TypeError(&quot;Class constructor Child cannot be invoked without &apos;new&apos;&quot;) &#125;&#125;// * 4.描述器 descriptor// 参数一：构造函数// 参数二：描述原型属性方法数组// 参数三：描述静态属性方法数组function _createClass(constructor,protoProperties,staticProperties) &#123; // * 5.如果protoProperties数组有数组成员 if(protoProperties.length)&#123; // * 6.遍历 for(let i = 0;i &lt; protoProperties.length;i++)&#123; // * 7.通过Object.defineProperty把属性方法添加到constructor的原型对象上 Object.defineProperty(constructor.prototype,protoProperties[i].key,&#123; // * 8.利用扩展运算符，把&#123;key:&quot;say&quot;,value:function()&#123;console.log(&quot;hello swr&quot;)&#125;&#125;展开 ...protoProperties[i] &#125;) &#125; &#125;&#125;// * 1.实例属性方法、原型属性方法、静态属性方法// 在es6中，原型属性方法不是通过prototype实现的// 而是通过一个叫描述器的东西实现的let Child = (function()&#123; function Child()&#123; _classCallCheck(Child,this) // * 2.实例属性方法还是写在构造函数内 this.name = &apos;邵威儒&apos; &#125; // * 3.描述器 descriptor // 参数一：构造函数 // 参数二：描述原型属性方法 // 参数三：描述静态属性方法 _createClass(Child, [ &#123;key:&quot;say&quot;,value:function()&#123;console.log(&quot;hello swr&quot;)&#125;&#125;, &#123;key:&quot;myname&quot;,value:&quot;iamswr&quot;&#125; ], [ &#123;key:&quot;total&quot;,value:function()&#123;return 100&#125;&#125; ]) return Child&#125;)()// * 9.最后我们new一个对象出来，并且调用原型属性方法，看能否调用成功let c = new Child()c.say() // &apos;hello swr&apos; 调用成功 接下来，我们把静态方法，staticProperties也处理一下，此时会发现，protoProperties和staticProperties都会遍历然后使用Object.defineProperty那么我们封装一个方法进行处理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647function _classCallCheck(constructor,instance) &#123; if(!(instance instanceof constructor))&#123; throw TypeError(&quot;Class constructor Child cannot be invoked without &apos;new&apos;&quot;) &#125;&#125;// * 1.封装一个方法，处理遍历和Object.definePropertyfunction _defineProperty(target,properties) &#123; for (let i = 0; i &lt; properties.length; i++) &#123; Object.defineProperty(target, properties[i].key, &#123; ...properties[i] &#125;) &#125;&#125;function _createClass(constructor,protoProperties,staticProperties) &#123; if(protoProperties.length)&#123; _defineProperty(constructor.prototype, protoProperties) &#125; // * 2.如果staticProperties数组有数组成员 if(staticProperties.length)&#123; // * 3.静态方法需要添加在constructor _defineProperty(constructor, staticProperties) &#125;&#125;let Child = (function()&#123; function Child()&#123; _classCallCheck(Child,this) this.name = &apos;邵威儒&apos; &#125; _createClass(Child, [ &#123;key:&quot;say&quot;,value:function()&#123;console.log(&quot;hello swr&quot;)&#125;&#125;, &#123;key:&quot;myname&quot;,value:&quot;iamswr&quot;&#125; ], [ &#123;key:&quot;total&quot;,value:function()&#123;return 100&#125;&#125; ]) return Child&#125;)()let c = new Child()c.say()// * 4.最后我们通过Child来调用静态方法console.log(Child.total()) // 100 这样完成了一个雏形，但是还有最重要的继承还没实现，接下来我们实现继承。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081function _classCallCheck(constructor,instance) &#123; if(!(instance instanceof constructor))&#123; throw TypeError(&quot;Class constructor Parent cannot be invoked without &apos;new&apos;&quot;) &#125;&#125;function defineProperty(target,properties) &#123; for (let i = 0; i &lt; properties.length; i++) &#123; Object.defineProperty(constructor.prototype, properties[i].key, &#123; ...properties[i] &#125;) &#125;&#125;function _createClass(constructor,protoProperties,staticProperties) &#123; if(protoProperties.length)&#123; defineProperty(constructor.prototype, protoProperties) &#125; if(staticProperties.length)&#123; defineProperty(constructor, staticProperties) &#125;&#125;// * 6.继承方法function _inherits(subClass, superClass) &#123; if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) &#123; throw new TypeError(&quot;Super expression must either be null or a function, not &quot; + typeof superClass); &#125; // * 7.把子类的原型对象指向新的原型对象 组合寄生式继承 继承原型属性方法 subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123; constructor: &#123; value: subClass, // 把constructor指向子类 enumerable: false, writable: true, configurable: true &#125; &#125;); // * 8.继承父类的静态方法 if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;&#125;function _possibleConstructorReturn(self, call) &#123; if (!self) &#123; throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;); &#125; return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self;&#125;// * 1.父类let Parent = (function()&#123; function Parent()&#123; _classCallCheck(Parent,this) this.name = &apos;父类实例属性&apos; &#125; _createClass(Parent, [ &#123;key:&quot;say&quot;,value:function()&#123;console.log(&quot;父类原型方法say&quot;)&#125;&#125;, &#123;key:&quot;myname&quot;,value:&quot;父类原型属性myname&quot;&#125; ], [ &#123;key:&quot;total&quot;,value:function()&#123;return 100&#125;&#125; ]) return Parent&#125;)()// * 2.子类let Child = (function (Parent) &#123; // * 4.这里接收传进的参数 父类 // * 5.写一个继承方法，继承原型属性方法和静态方法 _inherits(Child, Parent); function Child() &#123; _classCallCheck(Child, this) // * 9.继承实例属性方法 return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).apply(this, arguments)); &#125; return Child&#125;)(Parent) // * 3.在这里通过传参，把父类传进去let c = new Child()console.log(c.name) // &apos;父类实例属性&apos; 这样就可以用es5模拟es6的class了，会发现其实es6的class是es5面向对象的一个语法糖，经过这样解剖一下源码实现，会对class有更深刻的理解。 还有个问题，我们在react中，会这样写class 1234567891011class Parent&#123; name = &quot;邵威儒&quot;&#125;// 在正常情况下会报错，但是因为平时项目是使用了babel插件// 会帮我们自动编译语法，这种写法目前还处于草案阶段// 上面的写法实际等价于下面的写法class Parent&#123; constructor()&#123; this.name = &quot;邵威儒&quot; &#125;&#125; decorator 装饰器装饰器是用来装饰类的 123456789class Person &#123;&#125;function myFunction(target) &#123; target[&apos;myName&apos;] = &quot;邵威儒&quot;&#125;myFunction(Person)console.log(Person[&apos;myName&apos;]) // 邵威儒 这种写法，相当于给Person这个类添加了myName的属性那么换成decorator该怎么写呢？ 1234567891011// 在类前面写@myFunction@myFunctionclass Person &#123;&#125;function myFunction(target) &#123; target[&apos;myName&apos;] = &quot;邵威儒&quot;&#125;// myFunction(Person) 这一步可以不写console.log(Person[&apos;myName&apos;]) // 邵威儒 那么我们该怎么给myName传参呢？1234567891011@myFunction(&apos;邵威儒&apos;)class Person &#123;&#125;function myFunction(value) &#123; return function(target)&#123; // target代表的是类 target[&apos;myName&apos;] = value &#125;&#125;console.log(Person[&apos;myName&apos;]) // 邵威儒 修饰符也可以修饰类的方法12345678910111213141516class Person &#123; @myFunction say()&#123;&#125;&#125;// 如果修饰的是方法// 参数一：是Person.prototype// 参数二：是say// 参数三：是描述器function myFunction(target,key,descriptor)&#123; // 给这个类添加一个原型属性 Object.assign(target,&#123;name:&quot;邵威儒&quot;&#125;)&#125;let p = new Person()console.log(p.name) // 邵威儒 修饰符也可以修饰类的属性，比如我们有个不可修改的属性1234567891011class Person &#123; @onlyRead name = &apos;邵威儒&apos;&#125;function onlyRead(target,key,descriptor)&#123; descriptor.writable = false&#125;let p = new Person()p.name = &apos;swr&apos; // 报错，不能赋值 decorator的用处很多，包括重写函数1234567891011function myFunction(target,key,descriptor)&#123; // 拿出原本的函数 let fn = descriptor.value // 并且在原有的fn上加上自己的业务逻辑，比如console.log(&apos;哈哈哈&apos;) descriptor.value = function()&#123; // 这里写我们需要加入的内容 console.log(&apos;哈哈哈&apos;) // 这里执行原来的fn fn() &#125;&#125; 装饰器经常在react中使用~其实decorator是简写，逼格高一些。 es6其实还有很多新语法，但是我们平时并不常用，所以也没一一列举，可以到阮大神的es6看看~","categories":[{"name":"好文分享","slug":"好文分享","permalink":"http://ye63.github.io/categories/好文分享/"}],"tags":[{"name":"优质文章分享","slug":"优质文章分享","permalink":"http://ye63.github.io/tags/优质文章分享/"}]},{"title":"javascript截取文件名的后缀","slug":"javascript截取文件名的后缀","date":"2018-09-06T11:22:37.000Z","updated":"2018-09-11T07:43:09.078Z","comments":true,"path":"2018/09/06/javascript截取文件名的后缀/","link":"","permalink":"http://ye63.github.io/2018/09/06/javascript截取文件名的后缀/","excerpt":"","text":"12345678const fileName=\"text.png\";//带.的格式let fileFormat=fileName.substring(fileName.lastIndexOf('.'))// 不带.的格式let fileFormat2=fileName.substring(fileName.lastIndexOf('.')+1);console.log(fileFormat,fileFormat2) image","categories":[{"name":"前端","slug":"前端","permalink":"http://ye63.github.io/categories/前端/"}],"tags":[{"name":"js代码片段","slug":"js代码片段","permalink":"http://ye63.github.io/tags/js代码片段/"}]},{"title":"移动端限制input框只能输入数字","slug":"移动端限制input框只能输入数字","date":"2018-09-03T08:56:58.000Z","updated":"2018-09-11T07:43:09.099Z","comments":true,"path":"2018/09/03/移动端限制input框只能输入数字/","link":"","permalink":"http://ye63.github.io/2018/09/03/移动端限制input框只能输入数字/","excerpt":"","text":"html5 中，input 的 type 属性规定 input 元素的类型。1&lt;input type=\"value\"&gt; 有很多选项，详细可以参考HTML 5 type 属性 但是在移动端，还要区分是安卓用户，还是ios用户，所以这样写： 1&lt;input class=\"num_input\" type='number' pattern=\"[0-9]*\"/&gt; 在安卓端设置input类型为number，可限制键盘只输入数字，在ios端，要加入pattern验证输入字段的模式，才能限制数字输入。 另： autofocus=&quot;autofocus&quot;可以自动对焦。","categories":[{"name":"前端","slug":"前端","permalink":"http://ye63.github.io/categories/前端/"}],"tags":[{"name":"html5","slug":"html5","permalink":"http://ye63.github.io/tags/html5/"}]},{"title":"React Js 微信分享封装","slug":"React-Js-微信分享封装","date":"2018-09-03T07:17:54.000Z","updated":"2018-09-18T05:31:56.512Z","comments":true,"path":"2018/09/03/React-Js-微信分享封装/","link":"","permalink":"http://ye63.github.io/2018/09/03/React-Js-微信分享封装/","excerpt":"","text":"Introductions本篇文章给大家分享的内容是代码详解React Js 微信分享封装，有着一定的参考价值，有需要的朋友可以参考一下 话不多说，直接上源代码： Quick Start分享功能123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116import Fetch from './FetchIt';import API_URL from './url';import Share from './Share';let wxUtils = &#123;&#125;;////////////////////////////////////////////////////////////////////////////////////////// 分享/////////////////////////////////////////////////////////////////////////////////////////** getshareinfo?type= type :goods 课程详情 team 团详情 id 课程id tid 团ID * @param config * @param shareInfo &#123;imgUrl,title,description,link&#125; */function share2wx(config, shareInfo) &#123; const share = new Share(&#123; appid: config.appid, // 必填，公众号的唯一标识 timestamp: config.timestamp, // 必填，生成签名的时间戳 nonceStr: config.nonceStr, // 必填，生成签名的随机串 signature: config.signature, // 必填，签名 &#125;); share.init(Object.assign(&#123;&#125;, shareInfo));&#125;function getConfig(shareInfo) &#123; let href = window.location.href.split('#')[0]; const url = encodeURIComponent(href /*window.location.href*/); Fetch.get(`$&#123;API_URL.mobile.signature_path&#125;?url=$&#123;url&#125;`).then(data =&gt; &#123; share2wx(data, shareInfo); &#125;);&#125;/** * @param shareInfo */wxUtils.share = function (shareInfo) &#123; getConfig(shareInfo);&#125;;////////////////////////////////////////////////////////////////////////////////////////// 分享结束/////////////////////////////////////////////////////////////////////////////////////////** * 是否开启右上角Menu * @param open */wxUtils.optionMenu = function (open = true) &#123; if (open) &#123; openOptionMenu(); &#125; else &#123; disabledOptionMenu(); &#125;&#125;;/** * 是否禁用右上角 */function disabledOptionMenu() &#123; if (typeof WeixinJSBridge === \"undefined\") &#123; if (document.addEventListener) &#123; document.addEventListener('WeixinJSBridgeReady', onBridgeReady(true), false); &#125; else if (document.attachEvent) &#123; document.attachEvent('WeixinJSBridgeReady', onBridgeReady(true)); document.attachEvent('onWeixinJSBridgeReady', onBridgeReady(true)); &#125; &#125; else &#123; onBridgeReady(true); &#125;&#125;/** * 开启menu */function openOptionMenu() &#123; if (typeof WeixinJSBridge === \"undefined\") &#123; if (document.addEventListener) &#123; document.addEventListener('WeixinJSBridgeReady', onBridgeReady(false), false); &#125; else if (document.attachEvent) &#123; document.attachEvent('WeixinJSBridgeReady', onBridgeReady(false)); document.attachEvent('onWeixinJSBridgeReady', onBridgeReady(false)); &#125; &#125; else &#123; onBridgeReady(false); &#125;&#125;function onBridgeReady(disable = true) &#123; if (typeof WeixinJSBridge !== \"undefined\") WeixinJSBridge.call(disable ? 'hideOptionMenu' : 'showOptionMenu');&#125;/** * 隐藏微信网页底部的导航栏 * @param disable */wxUtils.disabledToolbar = function (disable = true) &#123; document.addEventListener('WeixinJSBridgeReady', function onBridgeReady() &#123; // 通过下面这个API隐藏底部导航栏 WeixinJSBridge.call(disable ? 'hideToolbar' : 'showToolbar'); &#125;);&#125;;export default wxUtils; 分享配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// 分享function Share(config) &#123; wx.config(&#123; debug: false, // 开启调试模式 appId: config.appid, // 必填，公众号的唯一标识 timestamp: config.timestamp, // 必填，生成签名的时间戳 nonceStr: config.nonceStr, // 必填，生成签名的随机串 signature: config.signature, // 必填，签名，见附录1 jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareWeibo'], // 必填，需要使用的JS接口列表，所有JS接口列表见附录2 &#125;);&#125;Share.prototype = &#123; constructor: Share, init(config) &#123; this.imgUrl = config.imgUrl; this.link = config.link; // this.musicPath = config.musicPath; this.description = config.description; this.title = config.title; wx.ready(() =&gt; &#123; // if (this.musicPath) &#123; // document.getElementById('musicIcon').play(); // &#125; this.toFriend(); this.toTimeline(); &#125;); wx.error(res =&gt; &#123; console.log(`$&#123;res&#125;`); &#125;); &#125;, toFriend() &#123; wx.onMenuShareAppMessage(&#123; imgUrl: this.imgUrl, link: this.link, title: this.title, desc: this.description, success: function () &#123; // 用户确认分享后执行的回调函数 &#125;, &#125;); &#125;, toTimeline() &#123; wx.onMenuShareTimeline(&#123; imgUrl: this.imgUrl, link: this.link, title: this.title, desc: this.description, success: function () &#123; // 用户确认分享后执行的回调函数 &#125;, &#125;); &#125;,&#125;;export default Share; 开启分享12345678//开启分享BaseComponent.wxUtils.optionMenu(true);BaseComponent.wxUtils.share(&#123; imgUrl: activityData.sharePicUrl, title: activityData.shareTitle, description: activityData.shareContent, link: url,&#125;);","categories":[{"name":"前端","slug":"前端","permalink":"http://ye63.github.io/categories/前端/"}],"tags":[{"name":"react","slug":"react","permalink":"http://ye63.github.io/tags/react/"}]},{"title":"错误码：events.js:183 throw er; // Unhandled 'error' event—解决办法","slug":"错误码：events-js-183-throw-er-Unhandled-error-event—解决办法","date":"2018-08-30T14:48:30.000Z","updated":"2018-09-11T07:43:09.101Z","comments":true,"path":"2018/08/30/错误码：events-js-183-throw-er-Unhandled-error-event—解决办法/","link":"","permalink":"http://ye63.github.io/2018/08/30/错误码：events-js-183-throw-er-Unhandled-error-event—解决办法/","excerpt":"","text":"控制台报错：12345678910111213141516171819202122232425Hash: 78f0873c3eb47a64bfaeVersion: webpack 1.14.0Time: 16mswebpack: Compiled successfully.events.js:183 throw er; // Unhandled &apos;error&apos; event ^Error: listen EADDRINUSE 127.0.0.1:8080 at Object._errnoException (util.js:1022:11) at _exceptionWithHostPort (util.js:1044:20) at Server.setupListenHandle [as _listen2] (net.js:1367:14) at listenInCluster (net.js:1408:12) at GetAddrInfoReqWrap.doListen [as callback] (net.js:1517:7) at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:97:10)npm ERR! code ELIFECYCLEnpm ERR! errno 1npm ERR! webpack-demos@1.0.0 dev: `webpack-dev-server --devtool eval --progress --colors`npm ERR! Exit status 1npm ERR!npm ERR! Failed at the webpack-demos@1.0.0 dev script.npm ERR! This is probably not a problem with npm. There is likely additional logging output above.npm ERR! A complete log of this run can be found in:npm ERR! C:\\Users\\qian\\AppData\\Roaming\\npm-cache\\_logs\\2018-08-30T14_46_37_546Z-debug.log 错误原因：端口号被占用 解决方案1.Win+R,cmd查询使用的端口号是否被占用：netstat -aon|findstr “8080”按回车显示占用8080端口对应的程序的PID号；2.根据PID号找到对应的程序：继续输入命令：tasklist|findstr “15008”按回车后显示出占用该端口的程序；3.按快捷键“Ctrl+Shift+Esc”调出Windows任务管理器，根据PID/程序对应名称结束该程序进程即可。","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"http://ye63.github.io/tags/npm/"}]},{"title":"合并数组的相同的key值，并且计算相同key值的个数","slug":"合并数组的相同的key值，并且计算相同key值的个数","date":"2018-08-30T07:33:19.000Z","updated":"2018-09-11T07:43:09.094Z","comments":true,"path":"2018/08/30/合并数组的相同的key值，并且计算相同key值的个数/","link":"","permalink":"http://ye63.github.io/2018/08/30/合并数组的相同的key值，并且计算相同key值的个数/","excerpt":"","text":"需求：合并数组的相同的key值，并且计算相同key值的个数 场景：根据list数组的每一项的key值coupon_sn合并数组，并且计数 js代码json数组：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364let list = [&#123; \"id\": 5899, \"is_use\": 0, \"use_time\": null, \"expired_time\": \"2018-12-31 00:00:00\", \"coupon\": &#123; \"coupon_sn\": \"1\", \"name\": \"满减\", \"type\": 2, \"count\": 99993, \"receive_count\": 6, \"is_fare\": 0, \"available_money\": \"2000.00\", \"reduce_money\": \"100.00\", \"discount\": \"1.000\", \"receive_start_time\": \"2018-07-27 00:00:00\", \"receive_end_time\": \"2020-12-31 00:00:00\", \"info\": \"\", \"created_at\": \"2018-07-27 21:22:51\", \"restriction_description\": \"仅限非板材使用\" &#125;&#125;, &#123; \"id\": 5899, \"is_use\": 0, \"use_time\": null, \"expired_time\": \"2018-12-31 00:00:00\", \"coupon\": &#123; \"coupon_sn\": \"2\", \"name\": \"满减\", \"type\": 2, \"count\": 99993, \"receive_count\": 6, \"is_fare\": 0, \"available_money\": \"2000.00\", \"reduce_money\": \"100.00\", \"discount\": \"1.000\", \"receive_start_time\": \"2018-07-27 00:00:00\", \"receive_end_time\": \"2020-12-31 00:00:00\", \"info\": \"\", \"created_at\": \"2018-07-27 21:22:51\", \"restriction_description\": \"仅限非板材使用\" &#125;&#125;, &#123; \"id\": 5899, \"is_use\": 0, \"use_time\": null, \"expired_time\": \"2018-12-31 00:00:00\", \"coupon\": &#123; \"coupon_sn\": \"2\", \"name\": \"满减\", \"type\": 2, \"count\": 99993, \"receive_count\": 6, \"is_fare\": 0, \"available_money\": \"2000.00\", \"reduce_money\": \"100.00\", \"discount\": \"1.000\", \"receive_start_time\": \"2018-07-27 00:00:00\", \"receive_end_time\": \"2020-12-31 00:00:00\", \"info\": \"\", \"created_at\": \"2018-07-27 21:22:51\", \"restriction_description\": \"仅限非板材使用\" &#125;&#125;] js代码12345678910111213141516171819202122 let hash = &#123; coupon: &#123;&#125;,&#125;, i = 0, res = [];list.forEach(function(item ) &#123; let coupon_sn = item.coupon.coupon_sn; if (hash[coupon_sn]) &#123; if (!res[hash[coupon_sn] - 1].count) &#123; res[hash[coupon_sn] - 1].count = 1 &#125; res[hash[coupon_sn] - 1].count += 1 &#125; else &#123; hash[coupon_sn] = ++i &amp;&amp; res.push(&#123; \"count\": 1, \"id\": item.id, \"is_use\": item.is_use, \"use_time\": item.use_time, \"expired_time\": item.expired_time, \"coupon\": item.coupon &#125;) &#125;&#125;);console.log(res);","categories":[{"name":"前端","slug":"前端","permalink":"http://ye63.github.io/categories/前端/"}],"tags":[{"name":"js代码片段","slug":"js代码片段","permalink":"http://ye63.github.io/tags/js代码片段/"}]},{"title":"怎么把数组倒置，又不影响原来数组，reverse不行","slug":"怎么把数组倒置，又不影响原来数组，reverse不行","date":"2018-08-18T15:33:00.000Z","updated":"2018-09-11T07:43:09.095Z","comments":true,"path":"2018/08/18/怎么把数组倒置，又不影响原来数组，reverse不行/","link":"","permalink":"http://ye63.github.io/2018/08/18/怎么把数组倒置，又不影响原来数组，reverse不行/","excerpt":"","text":"情景：怎么把数组倒置，又不影响原来数组，reverse不行，会把原数组也给反过来。1234var arr = [\"1\",\"2\",\"3\",\"4\"];var bbb = arr.reverse()console.log(arr); //[\"4\", \"3\", \"2\", \"1\"]console.log(bbb); //[\"4\", \"3\", \"2\", \"1\"] 直接改的话bbb和arr指向是同一个数组对象。reverse改变的是数组对象，a指向它，所以改变了，要改变就要让其指向不同 解决方案12345678var arr = [\"1\",\"2\",\"3\",\"4\"];//列举4个解决方案var bbb = [...arr].reverse() //方法1var bbb = [].concat(arr).reverse() //方法2var bbb = Object.assign([],arr).reverse()//方法3var bbb = arr.slice().reverse()//方法4console.log(arr); console.log(bbb); ES6语法很方便~","categories":[],"tags":[{"name":"js代码片段","slug":"js代码片段","permalink":"http://ye63.github.io/tags/js代码片段/"}]},{"title":"frank的前端开发规范（逐步完善）","slug":"frank的前端开发规范（逐步完善）","date":"2018-04-19T11:49:01.000Z","updated":"2018-09-18T11:54:42.589Z","comments":true,"path":"2018/04/19/frank的前端开发规范（逐步完善）/","link":"","permalink":"http://ye63.github.io/2018/04/19/frank的前端开发规范（逐步完善）/","excerpt":"","text":"js方法注释规范规范的注释很重要代码是写给人看的，顺便给机器运行，多谢注释可以增加代码的可读性 123456789101112131415161718/** ************** * @func 教师端请假功能 ; * @param &#123;String&#125; token 教师端头部的token; * @param &#123;string&#125; a - 参数a; * @param &#123;number&#125; b=1 - 参数b默认值为1; * @param &#123;string&#125; c=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx; * @param &#123;object&#125; d - 参数d为一个对象; * @param &#123;string&#125; d.e - 参数d的e属性; * @param &#123;string&#125; d.f - 参数d的f属性; * @param &#123;object[]&#125; g - 参数g为一个对象数组; * @param &#123;string&#125; g.h - 参数g数组中一项的h属性; * @param &#123;string&#125; g.i - 参数g数组中一项的i属性; * @param &#123;string&#125; [j] - 参数j是一个可选参数; * @description 2018年4月19日被frank开发于dev_sprint65分支， * XX年XX月被XX在xx分支修改（原因或者修改的功能）; ****************/ 变量命名规范1.标准变量命名使用驼峰式命名 eg. let thisIsMyName;2.常量全部大写，并使用下划线连接 eg. const MAX_COUNT = 10; 项目规范变量声明尽量提在函数首部，用一个var声明，不允许出现连着的两个var声明(也包括let，const) 1234567891011function doSomethingWithItems(items) &#123; // use one var var value = 10, result = value + 10, i, len; for (i = 0, len = items.length; i &lt; len; i++) &#123; result += 10; &#125;&#125; undefind使用规范（永远不要直接使用undefined进行变量判断，使用typeof和字符串’undefined’对变量进行判断。） 123456789// not goodif (person === undefined) &#123; ...&#125;// goodif (typeof person === 'undefined') &#123; ...&#125; 用’===’和’!==’代替’==’, ‘!=’使用对象的属性简写123456789const job = 'FrontEnd'// badconst item = &#123; job: job&#125;// goodconst item = &#123; job&#125; 使用拓展运算符 … 复制数组1234567891011// badconst items = []const itemsCopy = []const len = items.lengthlet i// badfor (i = 0; i &lt; len; i++) &#123; itemsCopy[i] = items[i]&#125;// gooditemsCopy = [...items] render使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051render: (h, params) =&gt; &#123; return h('div', [ h('span', &#123; attrs: &#123; class: \"table_details\" &#125;, on: &#123; click: () =&gt; &#123; this.edit(params.index) &#125; &#125; &#125;,), h('span', &#123; attrs: &#123; class: \"table_continue\" &#125;, on: &#123; click: () =&gt; &#123; this.show(params.index) &#125; &#125; &#125;,), h('span', &#123; attrs: &#123; class: \"table_more no_border_right\" &#125;, on: &#123; click: () =&gt; &#123; this.remove(params.row.id) &#125; &#125; &#125;,), h('Poptip', &#123; props: &#123; title:\"项目变更\", content:\"项目迁出\", placement:\"bottom-end\" &#125;, on: &#123; 'on-ok': () =&gt; &#123; &#125; &#125; &#125;, [ h('span', &#123; attrs: &#123; class: \"table_more no_border_right\" &#125; &#125;) ]) ])&#125; 文档：有时间整理一下http://taobaofed.org/blog/2017/01/05/writing-readable-code/","categories":[{"name":"前端","slug":"前端","permalink":"http://ye63.github.io/categories/前端/"}],"tags":[{"name":"开发规范","slug":"开发规范","permalink":"http://ye63.github.io/tags/开发规范/"}]},{"title":"Hello Hexo Blog","slug":"hello-world","date":"2015-09-03T07:17:54.000Z","updated":"2018-09-11T07:43:09.075Z","comments":true,"path":"2015/09/03/hello-world/","link":"","permalink":"http://ye63.github.io/2015/09/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo教程","slug":"Hexo教程","permalink":"http://ye63.github.io/categories/Hexo教程/"}],"tags":[]}]}